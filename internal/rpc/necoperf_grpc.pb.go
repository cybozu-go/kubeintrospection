// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.2
// source: internal/rpc/necoperf.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NecoPerf_Profile_FullMethodName = "/necoperf.NecoPerf/Profile"
)

// NecoPerfClient is the client API for NecoPerf service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NecoPerfClient interface {
	Profile(ctx context.Context, in *PerfProfileRequest, opts ...grpc.CallOption) (NecoPerf_ProfileClient, error)
}

type necoPerfClient struct {
	cc grpc.ClientConnInterface
}

func NewNecoPerfClient(cc grpc.ClientConnInterface) NecoPerfClient {
	return &necoPerfClient{cc}
}

func (c *necoPerfClient) Profile(ctx context.Context, in *PerfProfileRequest, opts ...grpc.CallOption) (NecoPerf_ProfileClient, error) {
	stream, err := c.cc.NewStream(ctx, &NecoPerf_ServiceDesc.Streams[0], NecoPerf_Profile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &necoPerfProfileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NecoPerf_ProfileClient interface {
	Recv() (*PerfProfileResponse, error)
	grpc.ClientStream
}

type necoPerfProfileClient struct {
	grpc.ClientStream
}

func (x *necoPerfProfileClient) Recv() (*PerfProfileResponse, error) {
	m := new(PerfProfileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NecoPerfServer is the server API for NecoPerf service.
// All implementations must embed UnimplementedNecoPerfServer
// for forward compatibility
type NecoPerfServer interface {
	Profile(*PerfProfileRequest, NecoPerf_ProfileServer) error
	mustEmbedUnimplementedNecoPerfServer()
}

// UnimplementedNecoPerfServer must be embedded to have forward compatible implementations.
type UnimplementedNecoPerfServer struct {
}

func (UnimplementedNecoPerfServer) Profile(*PerfProfileRequest, NecoPerf_ProfileServer) error {
	return status.Errorf(codes.Unimplemented, "method Profile not implemented")
}
func (UnimplementedNecoPerfServer) mustEmbedUnimplementedNecoPerfServer() {}

// UnsafeNecoPerfServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NecoPerfServer will
// result in compilation errors.
type UnsafeNecoPerfServer interface {
	mustEmbedUnimplementedNecoPerfServer()
}

func RegisterNecoPerfServer(s grpc.ServiceRegistrar, srv NecoPerfServer) {
	s.RegisterService(&NecoPerf_ServiceDesc, srv)
}

func _NecoPerf_Profile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PerfProfileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NecoPerfServer).Profile(m, &necoPerfProfileServer{stream})
}

type NecoPerf_ProfileServer interface {
	Send(*PerfProfileResponse) error
	grpc.ServerStream
}

type necoPerfProfileServer struct {
	grpc.ServerStream
}

func (x *necoPerfProfileServer) Send(m *PerfProfileResponse) error {
	return x.ServerStream.SendMsg(m)
}

// NecoPerf_ServiceDesc is the grpc.ServiceDesc for NecoPerf service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NecoPerf_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "necoperf.NecoPerf",
	HandlerType: (*NecoPerfServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Profile",
			Handler:       _NecoPerf_Profile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal/rpc/necoperf.proto",
}
